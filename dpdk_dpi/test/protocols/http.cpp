#include <gtest/gtest.h>
#include "../utils.h"
#include "common.h"

extern protocol_type SearchHttp(rte_mbuf *);

using namespace packet_modifier;

TEST(HTTP, BadLength) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x00, 0x00, 0x00, 0x00 // HTTP without anything else
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchHttp(m), UNKNOWN);
  rte_pktmbuf_free(m);
}

TEST(HTTP, Response) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x48, 0x54, 0x54, 0x50, // HTTP
    0x2f, // /
    0x31, 0x2e, 0x31, // 1.1
    0x20, // space
    0x32, 0x30, 0x30, // 200
    0x20, // space
    0x4f, 0x4b, // OK
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchHttp(m), HTTP);
  rte_pktmbuf_free(m);
}

TEST(HTTP, Get) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x47, 0x45, 0x54, // GET
    0x20, // space
    0x2f, // /
    0x20, // space
    0x48, 0x54, 0x54, 0x50, // HTTP
    0x2f, // /
    0x31, 0x2e, 0x31, // 1.1
    0x5c, 0x72, // \r
    0x5c, 0x6e, // \n
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchHttp(m), HTTP);
  rte_pktmbuf_free(m);
}

// TODO: other methods
