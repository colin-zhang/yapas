#include <gtest/gtest.h>
#include "../utils.h"
#include "common.h"

extern protocol_type SearchSip(rte_mbuf *);

using namespace packet_modifier;

TEST(SIP, BadLength) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x00, 0x00, 0x00, // SIP without anything else
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), UNKNOWN);
  rte_pktmbuf_free(m);
}

TEST(SIP, Response) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x53, 0x49, 0x50, // SIP
    0x2f, // /
    0x32, 0x2e, 0x30, // 2.0
    0x20, // space
    0x32, 0x30, 0x30, // 200
    0x20, // space
    0x4f, 0x4b, // OK
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Invite) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, // INVITE
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Ack) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x41, 0x43, 0x4b, // ACK
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Bye) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x42, 0x59, 0x45, // BYE
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Cancel) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, // CANCEL
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Options) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, // OPTIONS
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Register) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, // REGISTER
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Prack) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x50, 0x52, 0x41, 0x43, 0x4b, // PRACK
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Subscribe) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, // SUBSCRIBE
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Notify) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, // NOTIFY
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Publish) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, // PUBLISH
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Info) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x49, 0x4e, 0x46, 0x4f, // INFO
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Refer) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x52, 0x45, 0x46, 0x45, 0x52, // REFER
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Message) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, // MESSAGE
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}

TEST(SIP, Update) {
  uint8_t data[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x08, 0x00,

    0x05, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x40, 0x11, // (ttl, proto)
    0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00,

    0x55, 0x50, 0x44, 0x41, 0x54, 0x45, // UPDATE
    0x20, // space
    0x73, 0x69, 0x70, 0x3a, // sip:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // other data
  };
  auto m = InitPacket(data, sizeof(data));
  ASSERT_EQ(PreparePacket(m), true);
  ASSERT_EQ(SearchSip(m), SIP);
  rte_pktmbuf_free(m);
}
